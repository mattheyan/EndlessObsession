var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

var fs = require('fs');

module.exports = function(env, callback) {

  /* Paginator plugin. Defaults can be overridden in config.json
      e.g. "paginator": {"perPage": 10}
   */
  var PaginatorPage, optionsDefaults, sourceDefaults, getArticles, key, options, sourcesIndex, value, names;

  sourceDefaults = {
      articles: 'articles',
  };

  optionsDefaults = {
    sources: [{}],
    template: 'index.jade',
    perPage: 2,
    first: 'index.html',
    filename: 'page/%d/index.html'
  };

  options = env.config.paginator || {};

  sourcesIndex = {};

  function assignDefaults (obj, defaults) {
    // Assign default values for any  missing properties...
    for (key in defaults) {
      if (options[key] == null) {
        options[key] = defaults[key];
      }
    }
  }

  assignDefaults(options, optionsDefaults);

  options.sources.forEach(function(s, i) {
    assignDefaults(s, sourceDefaults);

    if (sourcesIndex.hasOwnProperty(s.articles)) {
      throw new Error("Found duplicate article source '" + s.articles + "'.");
    }

    sourcesIndex[s.articles] = i;
  });

  getArticles = function(contents, source, publishedOnly) {
    var articles, ref, sources;

    sources = [];

    articles = [];

    if (source) {
      if (sourcesIndex.hasOwnProperty(source)) {
        sources.push(options.sources[sourcesIndex[source]]);
      } else {
        throw new Error("Paginator with source name '" + source + "' was not found.");
      }
    } else {
      sources = options.sources;
    }

    sources.forEach(function (s) {
      ref = contents[s.articles];
      for (key in ref) {
        value = ref[key];
        if (value instanceof env.plugins.Page) {
          value.source = s.articles;
          if (publishedOnly) {
            if (value.metadata.status) {
              if (value.metadata.status === 'publish') {
                articles.push(value);
              }
            } else {
              // console.log("WARN: Article '" + value.title + "' on date '" + value.date + "' does not specify a status, assuming published.");
              articles.push(value);
            }
          } else {
            articles.push(value);
          }
        }
      }
    });

    articles.sort(function(a, b) {
      return b.date - a.date;
    });

    return articles;
  };

  PaginatorPage = (function(superClass) {
    extend(PaginatorPage, superClass);


    /* A page has a number and a list of articles */

    function PaginatorPage(pageNum, articles1) {
      this.pageNum = pageNum;
      this.articles = articles1;
    }

    PaginatorPage.prototype.getFilename = function() {
      if (this.pageNum === 1) {
        return options.first;
      } else {
        return options.filename.replace('%d', this.pageNum);
      }
    };

    PaginatorPage.prototype.getView = function() {
      return function(env, locals, contents, templates, callback) {
        var ctx, template;
        template = templates[options.template];
        if (template == null) {
          return callback(new Error("unknown paginator template '" + options.template + "'"));
        }
        ctx = {
          articles: this.articles,
          pageNum: this.pageNum,
          prevPage: this.prevPage,
          nextPage: this.nextPage
        };
        env.utils.extend(ctx, locals);
        return template.render(ctx, callback);
      };
    };

    return PaginatorPage;

  })(env.plugins.Page);

  env.registerGenerator('paginator', function(contents, callback) {
    var articles, i, j, k, l, len, len1, numPages, page, pageArticles, pages, ref, rv;
    articles = getArticles(contents, null, true);
    numPages = Math.ceil(articles.length / options.perPage);
    pages = [];
    for (i = j = 0, ref = numPages; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      pageArticles = articles.slice(i * options.perPage, (i + 1) * options.perPage);
      pages.push(new PaginatorPage(i + 1, pageArticles));
    }
    for (i = k = 0, len = pages.length; k < len; i = ++k) {
      page = pages[i];
      page.prevPage = pages[i - 1];
      page.nextPage = pages[i + 1];
    }
    rv = {
      pages: {}
    };
    for (l = 0, len1 = pages.length; l < len1; l++) {
      page = pages[l];
      rv.pages[page.pageNum + ".page"] = page;
    }
    rv['index.page'] = pages[0];
    rv['last.page'] = pages[numPages - 1];
    return callback(null, rv);
  });

  env.helpers.getArticles = getArticles;

  return callback();
};

// ---
// generated by coffee-script 1.9.2
