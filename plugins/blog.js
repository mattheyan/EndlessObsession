var path, replaceAll, slugify,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

path = require('path');

slugify = require('slugg');

replaceAll = function(string, map) {
  var re;
  re = new RegExp(Object.keys(map).join('|'), 'gi');
  return string.replace(re, function(match) {
    return map[match];
  });
};

module.exports = function(env, callback) {
  var BlogpostPage, defaults, key, options, prefix, value;
  defaults = {
    postsDir: 'articles',
    template: 'article.jade',
    filenameTemplate: '/:year/:month/:day/:file/index.html',
    stripTrailingSlash: false
  };
  options = env.config.blog || {};
  for (key in defaults) {
    value = defaults[key];
    if (options[key] == null) {
      options[key] = defaults[key];
    }
  }
  BlogpostPage = (function(superClass) {
    extend(BlogpostPage, superClass);

    function BlogpostPage() {
      return BlogpostPage.__super__.constructor.apply(this, arguments);
    }


    /* DRYer subclass of MarkdownPage */

    BlogpostPage.prototype.getUrl = function(base) {
      var result;
      result = BlogpostPage.__super__.getUrl.call(this, base);
      if (options.stripTrailingSlash && result[result.length - 1] === '/') {
        return result.substr(0, result.length - 1);
      } else {
        return result;
      }
    };

    BlogpostPage.prototype.getTemplate = function() {
      return this.metadata.template || options.template || BlogpostPage.__super__.getTemplate.call(this);
    };

    BlogpostPage.property('rawFilenameTemplate', 'getRawFilenameTemplate');

    BlogpostPage.prototype.getRawFilenameTemplate = function() {
      return this.metadata.filenameTemplate || options.filenameTemplate || BlogpostPage.__super__.getRawFilenameTemplate.call(this);
    };

    BlogpostPage.prototype.getFilenameTemplate = function() {
      var raw;
      raw = this.rawFilenameTemplate;
      if (raw[0] === '/') {
        return raw;
      } else {
        return '/' + raw;
      }
    };

    BlogpostPage.prototype.getFilename = function() {
      var dirname, filename, rawFileNameTemplate;
      rawFileNameTemplate = this.rawFilenameTemplate;
      dirname = path.dirname(this.filepath.relative);
      filename = BlogpostPage.__super__.getFilename.call(this);
      filename = replaceAll(filename, {
        ':slug': this.slug
      });
      if (rawFileNameTemplate[0] === '/') {
        filename = '/' + filename;
      }
      if (filename[0] === '/') {
        return filename.slice(1);
      } else {
        return path.join(dirname, filename);
      }
    };

    BlogpostPage.property('slug', 'getSlug');

    BlogpostPage.prototype.getSlug = function() {
      return this.metadata.slug || slugify(this.title + '');
    };

    return BlogpostPage;

  })(env.plugins.MarkdownPage);
  prefix = options.postsDir ? options.postsDir + '/' : '';
  env.registerContentPlugin('posts', prefix + '**/*.*(markdown|mkd|md)', BlogpostPage);
  return callback();
};

// ---
// generated by coffee-script 1.9.2
