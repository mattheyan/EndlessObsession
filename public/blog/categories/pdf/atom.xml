<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pdf | The Endless Obsession]]></title>
  <link href="http://endlessobsession.heroku.com/blog/categories/pdf/atom.xml" rel="self"/>
  <link href="http://endlessobsession.heroku.com/"/>
  <updated>2012-09-06T22:24:05-04:00</updated>
  <id>http://endlessobsession.heroku.com/</id>
  <author>
    <name><![CDATA[Bryan Matthews]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Add JavaScript to a PDF Document with iTextSharp]]></title>
    <link href="http://endlessobsession.heroku.com/blog/add-javascript-to-a-pdf-document-with-itextsharp"/>
    <updated>2010-06-10T18:58:00-04:00</updated>
    <id>http://endlessobsession.heroku.com/blog/add-javascript-to-a-pdf-document-with-itextsharp</id>
    <content type="html"><![CDATA[<p><em>Originally posted June 8 2010</em></p>

<p>As you might have guessed from the title, this post is of the “get it done” variety.  So, the code may be a little rough.  Its the sort of code that works, but isn’t fully understood (by me at least).  I wasn’t able to find a clear example on the net, so I pieced together examples and guesses based on reading the code and interpreting method and class names.</p>

<p>Why guess?  Well, <a href="http://sourceforge.net/projects/itextsharp/">iTextSharp</a> is a pretty robust open source project which is useful for creating and manipulating PDF documents.  The problem is, it doesn’t seem to have any useful documentation online.  It <strong><em>is</em></strong> open source, so you can read the code all day.  Also, there are some tutorials that you can download from the <a href="http://sourceforge.net/projects/itextsharp/files/">files page</a> (in the examples folder).</p>

<p>The goal was to have a PDF document print automatically from a web page.  I decided to pass on coming up with a cross-browser (read: works in IE) method for automatically printing the document on the client, and instead decided to insert JavaScript into the generated PDF document that would cause it to print when opened.  This is what I came up with.</p>

<p>PdfReader reader = new PdfReader(inputStreamOrFile);</p>

<p>int pageCount = reader.NumberOfPages;</p>

<p>Rectangle pageSize = reader.GetPageSize(1);</p>

<p>// Setup writer</p>

<p>PdfDocument document = new PdfDocument(pageSize);</p>

<p>PdfWriter writer = PdfWriter.GetInstance(document, outputStreamOrFile);</p>

<p>document.Open();</p>

<p>// Copy each page</p>

<p>PdfContentByte content = writer.DirectContent;</p>

<p>for (int i = 0; i &lt; pageCount; i++)</p>

<p>{</p>

<p>document.NewPage();</p>

<p>PdfImportedPage page = writer.GetImportedPage(reader, i + 1); // page numbers are one-based</p>

<p>content.AddTemplate(page, 0, 0); // x and y correspond to position on the page?</p>

<p>}</p>

<p>// Insert JavaScript to print the document after a fraction of a second (allow time to become visible).</p>

<p>string jsText = "var res = app.setTimeOut('var pp = this.getPrintParams();pp.interactive = pp.constants.interactionLevel.full;this.print(pp);', 200);";</p>

<p>//string jsTextNoWait = "var pp = this.getPrintParams();pp.interactive = pp.constants.interactionLevel.full;this.print(pp);";</p>

<p>PdfAction js = PdfAction.JavaScript(jsText, writer);</p>

<p>writer.AddJavaScript(js);</p>

<p>document.Close()</p>

<p>As for the JavaScript, the call to setTimeOut is there so that the PDF is rendered before the print dialog is shown.  Otherwise, the users will see the print dialog and a blank page, which may be confusing.  If the PDF is not visible anyway (as in my case) then you don’t really need the timeout.  The actual printing is based on the documentation of Acrobat JavaScript from <a href="http://livedocs.adobe.com/acrobat_sdk/9.1/Acrobat9_1_HTMLHelp/wwhelp/wwhimpl/js/html/wwhelp.htm?href=JS_API_AcroJSPreface.87.6.html&amp;accessible=true">Adobe’s website</a>.  In this example, the <a href="http://livedocs.adobe.com/acrobat_sdk/9.1/Acrobat9_1_HTMLHelp/wwhelp/wwhimpl/js/html/wwhelp.htm?href=JS_API_AcroJSPreface.87.6.html&amp;accessible=true">iteration level</a> is set to “full”, meaning that the user will get the print dialog and progress feedback.  You can also use “automatic” (no dialog, includes progress) and “silent” (no dialog or progress).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PDF Embed Weirdness]]></title>
    <link href="http://endlessobsession.heroku.com/blog/pdf-embed-weirdness"/>
    <updated>2010-06-10T18:55:00-04:00</updated>
    <id>http://endlessobsession.heroku.com/blog/pdf-embed-weirdness</id>
    <content type="html"><![CDATA[<p><em>Originally posted April 5 2010</em></p>

<p>The other day I was working on a web page where the user does some stuff and then as the result a nice, shiny PDF is embedded in the page.  I noticed that in Internet Explorer (I was using IE8) the embedded region showed up as a blank rectangle with a little icon in the upper left-hand corner.  Weird…</p>

<p>One of my co-workers suggested that I try embedding a static PDF file.  In my case the source URL was an aspx page that dynamically renders the PDF.  But that can’t possibly matter, right?  I mean, as long as the content type is correct and the file is intact.  I guess it does.</p>

<p>I won’t bore you with the details, but I determined through trial and error that the following conditions had to be met for the embedded PDF to display in IE8:</p>

<p>1)  The “type” attribute must be specified as “application/pdf”, regardless of the fact that the external resource has the correct content type header.  Because of my own ignorance I freely accept that there is probably a good reason for this.  Besides, its good practice anyway – especially in my case (“what does this Page.aspx render as???”).</p>

<p>2)  The URL must include “pdf” or “.pdf” (not sure if the “.” is necessary), even if on the query string!  Really?  I didn’t believe it myself, but I tested a gratuitous number of times and eventually disbelief gave way to sheer exhaustion.</p>

<p>3)  Embed tag must be injected into the page with all attribute values at once (using jQuery) rather than injecting the tag and then setting attribute values (like type and src).  This may be a jQuery issue, but its worth mentioning anyway.</p>

<p>So, the moral of the story is…</p>

<p>If it doesn’t work then first reduce the problem to its simplest form.</p>
]]></content>
  </entry>
  
</feed>
