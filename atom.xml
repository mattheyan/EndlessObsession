<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The Endless Obsession</title>
  <link href="http://endlessobsession.com/atom.xml" rel="self"/>
  <link href="http://endlessobsession.com/"/>
  <updated>2015-04-18T15:20:00-04:00</updated>
  <id>http://endlessobsession.com/</id>
  <author>
    <name><![CDATA[Bryan Matthews]]>
    </name>
  </author>
  <generator uri="http://wintersmith.io/">Wintersmith</generator>
  <entry>
    <title type="html"><![CDATA[So Long Octopress, Hello Wintersmith]]>
    </title>
    <link href="http://endlessobsession.com/blog/so-long-octopress-hello-wintersmith"/>
    <updated>2015-04-18T15:20:00-04:00</updated>
    <id>http://endlessobsession.com/blog/so-long-octopress-hello-wintersmith</id>
    <content type="html"><![CDATA[&lt;p&gt;&lt;a href=&quot;http://octopress.org/&quot;&gt;Octopress&lt;/a&gt; has been a popular hacker’s blog for quite a
while, and so I made the switch a few years ago in order to escape the clutches
of Wordpress. Now I have a hack-able blog that also costs me nothing to host.&lt;/p&gt;
&lt;p&gt;Unfortunately, Octopress isn’t a good long-term fit. At the end of the day the
deal-breaker for me is the fact that it runs on ruby.&lt;/p&gt;
&lt;p&gt;Don’t get me wrong, ruby itself is just fine. But, if you’ve worked with ruby on
Windows you know that its full of pain all the way down. If you’re thinking
about it, do yourself a favor and just don’t do it.&lt;/p&gt;
&lt;p&gt;Sure, I could have run Linux on a separate partition, or on a VM, or in the
cloud, etc. I have no problem doing that, except that it requires managing yet
another machine/OS. I’m already investing enough time automating Windows-based
workstations, so why &lt;del&gt;waste&lt;/del&gt; spend my time on it if I don’t have to?&lt;/p&gt;
&lt;p&gt;So I set out to find an alternative that would work reliably on Windows, and
&lt;strong&gt;run on node.js&lt;/strong&gt;. I targeted node because it generally &lt;em&gt;just works&lt;/em&gt; on Windows,
and node and JavaScript in general are skills that I’m more interested in developing.
What I found was &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintersmith&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;what-is-wintersmith-&quot;&gt;What is Wintersmith?&lt;/h3&gt;
&lt;p&gt;Withersmith is described as a “flexible static site generator”. Much like Jekyll
and Octopress, it automates creating a static site from separate templates and
content. For my purposes, content means primarily markdown files for blog posts.&lt;/p&gt;
&lt;p&gt;From what I can tell, Wintersmith is closer to Jekyll than it is to Octopress.
In other words, its not focussed on being a blog, but due to its flexibility you
can easily use it to build your blog.&lt;/p&gt;
&lt;h3 id=&quot;taking-wintersmith-for-a-test-drive&quot;&gt;Taking Wintersmith for a Test Drive&lt;/h3&gt;
&lt;p&gt;Before I migrated my blog, I first had to determine if it would meet my needs,
and whether I’d want to use it. The first step is to install Wintersmith.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install wintersmith -g
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Since Wintersmith is a tool, it should be installed globally, thus the &lt;code&gt;-g&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;Next, use wintersmith to scaffold a new site.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wintersmith new &amp;lt;path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At this point you can &lt;code&gt;cd&lt;/code&gt; into the new directory that was created, and run
&lt;code&gt;wintersmith preview&lt;/code&gt;, then navigate to the URL that prints out on the console.&lt;/p&gt;
&lt;p&gt;Conveniently, the starter site that is generated is a simple blog, so it looks
like a good starting point. However, it will take some work to make it more or
less on-par with the Octopress version. And I’m only going to go as far as
“good enough”.&lt;/p&gt;
&lt;h3 id=&quot;a-fresh-start&quot;&gt;A Fresh Start&lt;/h3&gt;
&lt;p&gt;Before I dive into the nitty gritty of the migration, I want to make a quick note
about source control. Since I was using Octopress previously, my blog had been
a fork of the Octopress repository. As you might imagine, not only is this a
terrible way to distribute a blog generator, but it also meant that my repository’s
history was a mess.&lt;/p&gt;
&lt;p&gt;In order to get a fresh start, I chose to move to an orphan branch and seed it
with the existing Octopress repository files. From there I could create a branch
for the migration, and then merge that into master when complete.&lt;/p&gt;
&lt;p&gt;The end result would be two different branch graphs. One would be the old Octopress
blog, and the other would be my new Wintersmith blog. The new wintersmith blog
history would look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* d4e924a    [master] Add new post &amp;#39;...
|\
| * 043ed82  [octopress-to-wintersmith] Update templates and styles
| * 5a51c39  Migrate content to Wintersmith structure
|/
* 8de24a8    Import files from Octopress
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Alternatively I could have chosen to re-create the master branch from the
beginning of my fork of Octopress, but that would have been more difficult so I
decided against it. After all, I do need to start writing content again…&lt;/p&gt;
&lt;h3 id=&quot;migrating-the-site&quot;&gt;Migrating the Site&lt;/h3&gt;
&lt;p&gt;1) Remove old Octopress files&lt;/p&gt;
&lt;p&gt;Once I had my new orphan branch set up, the first thing to do is remove a bunch
of files and directories that will no longer be needed. For me this was:
&lt;code&gt;.themes/&lt;/code&gt;, &lt;code&gt;sass/&lt;/code&gt;, &lt;code&gt;_config.yml&lt;/code&gt;, &lt;code&gt;.rbenv-version&lt;/code&gt;, &lt;code&gt;.rvmrc&lt;/code&gt;, &lt;code&gt;.slugignore&lt;/code&gt;,
&lt;code&gt;CHANGELOG.markdown&lt;/code&gt;, &lt;code&gt;README.markdown&lt;/code&gt;, &lt;code&gt;Rakefile&lt;/code&gt;, &lt;code&gt;Gemfile&lt;/code&gt;, &lt;code&gt;Gemfile.lock&lt;/code&gt;,
&lt;code&gt;config.rb&lt;/code&gt;, and &lt;code&gt;config.ru&lt;/code&gt;. You might also have stuff in &lt;code&gt;.gitignore&lt;/code&gt; that is
no longer needed.&lt;/p&gt;
&lt;p&gt;2) Add new Wintersmith files&lt;/p&gt;
&lt;p&gt;Assuming that you have node and wintersmith installed, and have created a
wintersmith site using the &lt;code&gt;wintersmith new &amp;lt;path&amp;gt;&lt;/code&gt; command, copy everything
that wintersmith generated (except for the readme) into your repository.&lt;/p&gt;
&lt;p&gt;3) Basic configuration&lt;/p&gt;
&lt;p&gt;Fill in the &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;owner&lt;/code&gt;, and description fields in &lt;code&gt;config.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;4) Move content (posts) to the new location&lt;/p&gt;
&lt;p&gt;Octopress puts post markdown files in the &lt;code&gt;source\_posts&lt;/code&gt; directory. Wintersmith,
on the other hand, looks in the &lt;code&gt;contents\articles&lt;/code&gt; directory. In my case, I
was prefixing my URLs with ‘blog’, and so the posts will end up in &lt;code&gt;contents\blog&lt;/code&gt;
instead, so you may need to tweak the commands below to fit your scenario.&lt;/p&gt;
&lt;p&gt;You could try &lt;code&gt;remove \contents\articles&lt;/code&gt; or &lt;code&gt;rm .\contents\articles -r -force&lt;/code&gt;
in the case of PowerShell.&lt;/p&gt;
&lt;p&gt;Then, to preserve source control history to some extent, &lt;code&gt;git mv source\_posts
contents\blog&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;5) Tweak the ‘Paginator’ Plugin&lt;/p&gt;
&lt;p&gt;At this point, the paginator won’t find any articles to list out, because it
expects to find sub-directories, each with a single &lt;code&gt;index.md&lt;/code&gt; file. This makes
sense because it closely aligns with the way that the desired URLs will ultimately
map to the ‘.htm[l]’ files that wintersmith generates, but it is slightly
inconvenient in a number of ways, so I chose to preserve the Octopress approach
of a list of ‘.md’ files at the top-level. In order to accomplish this, you have
to customize the process a bit.&lt;/p&gt;
&lt;p&gt;Edit the &lt;code&gt;getArticles&lt;/code&gt; function in &lt;code&gt;plugins\paginator.coffee&lt;/code&gt; so that it looks
like this (based on
&lt;a href=&quot;http://marcocarag.com/2014/03/30/migrating-my-blog-s-content-to-wintersmith/&quot;&gt;Marco Carag’s blog&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getArticles = (contents) -&amp;gt;
    # helper that returns a list of articles found in *contents*
    articles = []
    for key, value of contents[options.articles]
        articles.push value if value instanceof env.plugins.Page

    articles.sort (a, b) -&amp;gt; b.date - a.date
    return articles
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should now have a functional site, however there are many differences
between the old site and the new site (including URLs), so unless you want a
bunch of links to break, there is still work left to do.&lt;/p&gt;
&lt;p&gt;6) Customize URLs&lt;/p&gt;
&lt;p&gt;Article URLs look something like ‘/articles/yyyy-mm-dd-some-slug/‘, but I want
them to be ‘/blog/some-slug’ for backwards compatibility.&lt;/p&gt;
&lt;p&gt;Create a file &lt;code&gt;plugins\blog.coffee&lt;/code&gt; and paste in the following code (based on
&lt;a href=&quot;http://marcocarag.com/2014/03/30/migrating-my-blog-s-content-to-wintersmith/&quot;&gt;Marco Carag’s blog&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;path = require &amp;#39;path&amp;#39;
slugify = require &amp;#39;slugg&amp;#39;

replaceAll = (string, map) -&amp;gt;
  re = new RegExp Object.keys(map).join(&amp;#39;|&amp;#39;), &amp;#39;gi&amp;#39;
  return string.replace re, (match) -&amp;gt; map[match]

    module.exports = (env, callback) -&amp;gt;

  defaults =
    postsDir: &amp;#39;articles&amp;#39; # directory containing blog posts
    template: &amp;#39;article.jade&amp;#39;
    filenameTemplate: &amp;#39;/:year/:month/:day/:file/index.html&amp;#39;
    stripTrailingSlash: false

  # assign defaults for any option not set in the config file
  options = env.config.blog or {}
  for key, value of defaults
    options[key] ?= defaults[key]

  class BlogpostPage extends env.plugins.MarkdownPage
    ### DRYer subclass of MarkdownPage ###

    getUrl: (base) -&amp;gt;
      result = super(base)
      if (options.stripTrailingSlash and result[result.length - 1] == &amp;#39;/&amp;#39;)
        return result.substr(0, result.length - 1)
      else
        return result

    getTemplate: -&amp;gt;
      @metadata.template or options.template or super()

    @property &amp;#39;rawFilenameTemplate&amp;#39;, &amp;#39;getRawFilenameTemplate&amp;#39;
    getRawFilenameTemplate: -&amp;gt;
      @metadata.filenameTemplate or options.filenameTemplate or super()

    getFilenameTemplate: -&amp;gt;
      raw = @rawFilenameTemplate

      if raw[0] is &amp;#39;/&amp;#39;
        # already an absolute path
        return raw
      else
        # prevent base page class from resolving paths
        return &amp;#39;/&amp;#39; + raw

    getFilename: -&amp;gt;
      rawFileNameTemplate = @rawFilenameTemplate

      dirname = path.dirname @filepath.relative

      filename = super()

      # enable custom &amp;#39;slug&amp;#39; metadata propery
      filename = replaceAll filename,
        &amp;#39;:slug&amp;#39;: @slug

      if rawFileNameTemplate[0] is &amp;#39;/&amp;#39;
        # remove leading slash from filename template
        filename = &amp;#39;/&amp;#39; + filename

      if filename[0] is &amp;#39;/&amp;#39;
        # filenames starting with a slash are absolute paths in the content tree
        return filename.slice(1)
      else
        # otherwise they are resolved from their directory in the tree
        return path.join dirname, filename

    @property &amp;#39;slug&amp;#39;, &amp;#39;getSlug&amp;#39;
    getSlug: -&amp;gt;
      @metadata.slug or slugify(@title+&amp;#39;&amp;#39;)

  # register the plugin
  prefix = if options.postsDir then options.postsDir + &amp;#39;/&amp;#39; else &amp;#39;&amp;#39;
  env.registerContentPlugin &amp;#39;posts&amp;#39;, prefix + &amp;#39;**/*.*(markdown|mkd|md)&amp;#39;, BlogpostPage

  # done!
  callback()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You’ll also need to add it to the ‘plugins’ key in &lt;code&gt;config.json&lt;/code&gt;. This will
allow you to customize features of your blog posts, including URLs, default jade
template, etc. You’ll also need to install the ‘slugg’ module via npm (and save
it in your package.json file) -&amp;gt; &lt;code&gt;npm install slugg --save-dev&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Add this to &lt;code&gt;config.json&lt;/code&gt; to set a default template:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;blog&amp;quot;: {
    &amp;quot;template&amp;quot;: &amp;quot;article.jade&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This also enables URL customization, and the default template is
“/:year/:month/:day/:file/index.html”, so your article URLs will now look like
‘/yyyy/mm/dd/some-slug/‘.&lt;/p&gt;
&lt;p&gt;For backwards compatibility I need by URLs to look like ‘/blog/some-slug’, so I
changed the template to “/blog/:slug/index.html” (:slug is an optional ‘slug’
key in the markdown file, or the slug based on the title, I needed a ‘slug’
option b/c some of my Octopress slugs were different from what Wintersmith would
generate, its a good idea to hard-code them all for the import, and I will
probably do this moving forward as well, so that I have more control over the
URLs).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;blog&amp;quot;: {
    &amp;quot;template&amp;quot;: &amp;quot;article.jade&amp;quot;,
    &amp;quot;filenameTemplate&amp;quot;: &amp;quot;/blog/:slug/index.html&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There is a trailing slash in the URL links to posts, so use the
‘stripTrailingSlash’ option to remove it. This is not a functional change, but
it helps to be able to more easily compare the old and new output.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;blog&amp;quot;: {
    &amp;quot;template&amp;quot;: &amp;quot;article.jade&amp;quot;,
    &amp;quot;filenameTemplate&amp;quot;: &amp;quot;/blog/:slug/index.html&amp;quot;,
    &amp;quot;stripTrailingSlash&amp;quot;: true
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;7) Fix Archive and Paging Links&lt;/p&gt;
&lt;p&gt;My article URLs are correct, but the archive and “paging” links are
‘/archive.html’ and ‘/page/1/‘, respectively. I want them to be ‘/blog/archives’
and ‘/blog/page/1’ instead.&lt;/p&gt;
&lt;p&gt;Before making these changes, I want the contents structure to more accurately
match the generated site structure, so move the blog files that I currently have
into a ‘blog’ folder.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;blog&amp;quot;: {
    &amp;quot;postsDir&amp;quot;: &amp;quot;blog&amp;quot;,
    &amp;quot;template&amp;quot;: &amp;quot;article.jade&amp;quot;,
    &amp;quot;filenameTemplate&amp;quot;: &amp;quot;/blog/:slug/index.html&amp;quot;,
    &amp;quot;stripTrailingSlash&amp;quot;: true
},
&amp;quot;paginator&amp;quot;: {
    &amp;quot;articles&amp;quot;: &amp;quot;blog&amp;quot;,
    &amp;quot;filename&amp;quot;: &amp;quot;blog/page/%d/index.html&amp;quot;,
    &amp;quot;perPage&amp;quot;: 3
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Move the archive template into the ‘blog folder’: &lt;code&gt;mv .\contents\archive.json
.\contents\blog\archives\index.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In ‘index.jade’: change &lt;code&gt;a(href=&amp;#39;/archive.html&amp;#39;)&lt;/code&gt; to &lt;code&gt;a(href=&amp;#39;/blog/archives&amp;#39;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, I renamed the ‘article.jade’ template to ‘post.jade’.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;blog&amp;quot;: {
    &amp;quot;postsDir&amp;quot;: &amp;quot;blog&amp;quot;,
    &amp;quot;template&amp;quot;: &amp;quot;post.jade&amp;quot;,
    &amp;quot;filenameTemplate&amp;quot;: &amp;quot;/blog/:slug/index.html&amp;quot;,
    &amp;quot;stripTrailingSlash&amp;quot;: true
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;8) Atom Feed and Sitemap&lt;/p&gt;
&lt;p&gt;Now the last couple of things to take care of are generating an Atom feed, and
generating a sitemap.&lt;/p&gt;
&lt;p&gt;The sitemap is relatively easy:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install wintersmith-contents --save&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install wintersmith-sitemap --save&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Add ‘wintersmith-contents’ and ‘wintersmith-sitemap’ to the ‘plugins’ key in
&lt;code&gt;config.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The Atom feed will be a bit trickier, so we’ll need to create a custom template
for it: &lt;code&gt;templates\atom.jade&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
- var articles = _.first(env.helpers.getArticles(contents), 20);
- var canonicalUrl = locals.url.lastIndexOf(&amp;#39;/&amp;#39;) === locals.url.length - 1 ? locals.url : locals.url + &amp;#39;/&amp;#39;;
feed(xmlns=&amp;#39;http://www.w3.org/2005/Atom&amp;#39;)
  title= &amp;#39;&amp;#39; + locals.title + &amp;#39;&amp;#39;
  link(href=canonicalUrl + &amp;#39;atom.xml&amp;#39;, rel=&amp;#39;self&amp;#39;)
  link(href=canonicalUrl)
  updated= moment(articles[0].date).format()
  id= canonicalUrl
  author
    name
        | &amp;lt;![CDATA[
        = locals.owner
        | ]]&amp;gt;
  generator(uri=&amp;#39;http://wintersmith.io/&amp;#39;) Wintersmith
  for article in articles
    - var permalink = canonicalUrl + (article.url.indexOf(&amp;#39;/&amp;#39;) === 0 ? article.url.substring(1) : article.url)
    entry
        title(type=&amp;#39;html&amp;#39;)
            | &amp;lt;![CDATA[
            = article.title
            | ]]&amp;gt;
        link(href=permalink)
        updated= moment(article.date).format()
        id= permalink
        //- passing locals.url resolves all relative urls to absolute
        content(type=&amp;#39;html&amp;#39;)
            | &amp;lt;![CDATA[
            = article.metadata.excerpt || article.getHtml(locals.url)
            | ]]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;wrap-up&quot;&gt;Wrap Up&lt;/h3&gt;
&lt;p&gt;I’m sure I left out a few details, but that should get you 80% of the way there.
If you have questions feel free to hit up the comments below.&lt;/p&gt;
]]>
    </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Octopress post excerpts and 'couldn't parse YAML']]>
    </title>
    <link href="http://endlessobsession.com/blog/octopress-post-excerpts-and-couldnt-parse-yaml"/>
    <updated>2013-10-15T21:14:00-04:00</updated>
    <id>http://endlessobsession.com/blog/octopress-post-excerpts-and-couldnt-parse-yaml</id>
    <content type="html"><![CDATA[&lt;p&gt;This evening I noticed a syntax error in my blog’s ATOM feed. The error seemed to stem from the text in one of my more recent posts, what exactly I didn’t bother to determine. However, I also noticed that the post summaries were rather large and didn’t appear to do a good job of summarizing post content in any case. So, it seemed the best thing to do was to figure out how I could get Octopress to use a better summary and kill 2 birds with one stone.&lt;/p&gt;
&lt;p&gt;I discovered that the YAML that lives in each post’s header (more on that later) &lt;a href=&quot;https://github.com/imathis/octopress/issues/1146&quot;&gt;could include an “excerpt” property&lt;/a&gt; where I could write my own summary of the post.&lt;/p&gt;
&lt;p&gt;For example, here’s the header of this post:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
layout: post
title: &amp;quot;Octopress post excerpts and &amp;#39;couldn&amp;#39;t parse YAML&amp;#39;&amp;quot;
date: 2013-10-15 21:14
excerpt: This evening I noticed a syntax error in my blog&amp;#39;s ATOM feed. The error seemed to stem from the text in one of my more recent posts, what exactly I didn&amp;#39;t bother to determine. However, I also noticed that the post summaries were rather large and didn&amp;#39;t appear to do a good job of summarizing post content in any case. So, it seemed the best thing to do was to figure out how I could get Octopress to use a better summary and kill 2 birds with one stone.
comments: true
categories: 
---
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This worked so well that I promptly went through all of my posts and threw up some quick excerpts without much thought. Unfortunately I soon ran into an error: &lt;a href=&quot;https://github.com/imathis/octopress/issues/57&quot;&gt;‘parse’: couldn’t parse YAML&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I hadn’t thought about it until now, but the configuration at the head of each post is YAML. I don’t know much about YAML, but apparently something was wrong with one of my excerpts.&lt;/p&gt;
&lt;p&gt;Fortunately I was able to track it down to the “:” character, which is somehow significant in YAML syntax. &lt;a href=&quot;http://yamllint.com/&quot;&gt;YAML Lint&lt;/a&gt; was an invaluable resource.&lt;/p&gt;
]]>
    </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[File.OpenWrite Gotcha]]>
    </title>
    <link href="http://endlessobsession.com/blog/file-dot-openwrite-gotcha"/>
    <updated>2013-01-03T12:29:00-05:00</updated>
    <id>http://endlessobsession.com/blog/file-dot-openwrite-gotcha</id>
    <content type="html"><![CDATA[&lt;p&gt;Recently I ran into an odd problem when writing a text file to disk using .NET’s &lt;code&gt;File.OpenWrite&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;using (var fileWriter = new StreamWriter(File.OpenWrite(outputFilePath)))
{
    fileWriter.WriteLine(&amp;quot;abc&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You might expect that after executing this code the text in the file would be “abc”.  Not quite.  In my case I was sometimes seeing results like this…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;abc
some other text
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;…where “some other text” is the last bit of text in the file before writing.&lt;/p&gt;
&lt;p&gt;It turns out that the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.io.file.openwrite.aspx&quot; title=&quot;System.IO.File.OpenWrite&quot;&gt;documentation for File.OpenWrite&lt;/a&gt; contains the answer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you overwrite a longer string (such as “This is a test of the OpenWrite method”) with a shorter string (such as “Second run”), the file will contain a mix of the strings (“Second runtest of the OpenWrite method”).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;OpenWrite&lt;/code&gt; behaves much like the dreaded insert mode in word processors and text editors.&lt;/p&gt;
&lt;p&gt;The solution that I chose is pretty simple.  Just &lt;a href=&quot;http://stackoverflow.com/questions/2695444/clearing-content-of-text-file-using-c-sharp&quot; title=&quot;Stack Overflow - Clearing content of text file using C#&quot;&gt;clear the file’s contents&lt;/a&gt; beforehand.&lt;/p&gt;
]]>
    </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Chrome select excessive padding]]>
    </title>
    <link href="http://endlessobsession.com/blog/chrome-select-excessive-padding"/>
    <updated>2012-11-27T19:41:00-05:00</updated>
    <id>http://endlessobsession.com/blog/chrome-select-excessive-padding</id>
    <content type="html"><![CDATA[&lt;p&gt;Recently I noticed that dropdowns (&amp;lt;select&amp;gt;) in chrome suddenly had an excessive amount of padding on my Windows 7 PC.  This is what it looked like.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/select-pad.png&quot; alt=&quot;Screenshot of excessive padding&quot;&gt;&lt;/p&gt;
&lt;p&gt;I did some digging on the web and found a &lt;a href=&quot;http://code.google.com/p/chromium/issues/detail?id=146745&quot;&gt;chromium bug report&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One of the comments near the end of the page gives the solution to the problem.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Actually that is the problem. Windows has a service called “Tablet PC Input Service”. When this is running Windows 7 thinks it’s a tablet instead of a desktop. Once I turned this off and restarted chrome the drop down spacing is correct. But as soon as I turn the service back on the extra spacing comes back.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sure enough, there was a service running on my laptop called “Tablet PC Input Service”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/tablet-pc-input-service.png&quot; alt=&quot;Screenshot of excessive padding&quot;&gt;&lt;/p&gt;
&lt;p&gt;…and when I stopped the service &lt;em&gt;&lt;strong&gt;and restarted chrome&lt;/strong&gt;&lt;/em&gt;, the padding went back to normal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/select-nopad.png&quot; alt=&quot;Screenshot of excessive padding&quot;&gt;&lt;/p&gt;
&lt;p&gt;My laptop is a touchscreen and turning off this service doesn’t seem to affect touchscreen functionality.  Don’t forget to change the service startup type to “Manual” or “Disabled” so that it doesn’t start back up the next time you log on.&lt;/p&gt;
&lt;p&gt;This &lt;a href=&quot;http://productforums.google.com/forum/#!topic/chrome/EIgNjmURGbo&quot;&gt;Google Groups post&lt;/a&gt; might also be relevant.&lt;/p&gt;
]]>
    </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Should you write awesome code?]]>
    </title>
    <link href="http://endlessobsession.com/blog/should-you-write-awesome-code"/>
    <updated>2012-06-28T22:48:00-04:00</updated>
    <id>http://endlessobsession.com/blog/should-you-write-awesome-code</id>
    <content type="html"><![CDATA[&lt;p&gt;I ran across this provacative post on the tubes: &lt;a href=&quot;http://jhovgaard.net/how-i-stopped-writing-awesome-code&quot;&gt;How I stopped writing awesome code&lt;/a&gt;. The following is my reaction and thoughts (hastily thrown together). Go to the link and read it first or what follows probably won’t make much sense.&lt;/p&gt;
&lt;p&gt;I certainly agree that some of the practices he mention can have little benefit in the short term. Many people pointed out in the comments that the short term gains of “trimming the fat” can come back to haunt you on long term projects, and I’ll second that.&lt;/p&gt;
&lt;p&gt;Someone in the comments described how they have frequently inherited projects where it looked like the developer(s) had this mindset and it usually turned out to be a mess/headache to maintain. I think the mental burden he described to understand concepts/tools like IOC, ORMs, etc. is only one side of the coin. The other side is that not following best practices and using powerful tools that are available can be just as frustrating to a developer who inherits the project (or even your future self), especially in the event that the app has to be significantly enhanced or changed. That said, I have also had the experience where I found that I had over-engineered a project too early and ended up “stuck” with some of those poor decisions later on. I think the key is to not try to over-engineer too early, but rather follow only tried and true best practices that require little added effort and could yield future gains, improve and refactor as the project grows, and never be satisfied with where things are today. For what it’s worth, in the case where I made regrettable engineering decisions early on, I was also deviating from common/best practices, i.e. trying to be clever.&lt;/p&gt;
&lt;p&gt;As for F12, I don’t think you can ever really get around the limitations of the IDE with respect to interfaces and abstract/virtual members. I have been in the habit lately of using Shift+F12 (symbol search) rather than “Go to Definition” unless I know for sure that there is a single implementation of the member that I’m trying to get at. Resharper is also a good choice to improve the IDE experience. As irritating as F12 can be, I wouldn’t use that as reason to avoid using useful language features.&lt;/p&gt;
&lt;p&gt;Finally, to tie it together with an anecdote: I can think of two projects off the top of my head that seem to fall into the too extremes. One was hastily thrown together by a freelance developer to meet a client need. The source control wasn’t hosted on a popular OSS hosting services, it was just offered up for download on the blog.  There were no unit tests.  Most of the code was in a single class file with a number of supporting classes that were essentially just data containers.  On the one hand, I ended up having to significantly enhance that project and found it to be very frustrating and painful.  On the other hand, if he hadn’t thrown it together it may be that nothing like it would have existed at all and I would have been forced to start from square 1 (and making my own mistakes as a result).  The other project was a highly engineered and conformed to a highly detailed open specification, complete with interfaces, IOC, and unit tests galore.  On the one hand, when I discovered a bug I was able to easily verify the bug via unit test, fix it, and see it go green.  On the other hand, the project is not very active now (has been somewhat superseded by other technology) so you could argue that the effort was wasted.&lt;/p&gt;
&lt;p&gt;Its all about balance…&lt;/p&gt;
&lt;p&gt;Also, someone pointed out that its possible to write tests as UI acceptance tests that actually interact with the web browser (using Selenium) and mimic user behavior. I happen to use WatiN instead in my day-to-day, but what’s important is that you can verify the behavior that your clients are going to be looking for in an automated fashion. Do it!&lt;/p&gt;
&lt;p&gt;Thanks to Jonas for provoking critical thought!  :)&lt;/p&gt;
]]>
    </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Carolina Code Camp 2012 Presentation]]>
    </title>
    <link href="http://endlessobsession.com/blog/carolina-code-camp-2012-presentation"/>
    <updated>2012-05-26T16:51:00-04:00</updated>
    <id>http://endlessobsession.com/blog/carolina-code-camp-2012-presentation</id>
    <content type="html"><![CDATA[&lt;p&gt;Recently I co-presented with &lt;a href=&quot;http://bobbydimmick.com/&quot;&gt;Bobby Dimmick&lt;/a&gt; at the annual &lt;a href=&quot;http://codecamp.developersguil1d.org/&quot;&gt;Carolina Code Camp&lt;/a&gt;, put on by the Enterprise Developers Guild of Charlotte.  The event was wildly successful, with sold-out attendance and a day fully booked with speakers.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/arturask/sets/72157629645140924/with/7162456222/&quot;&gt;Pictures from the event&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Our presentation was entitled “Building rich, model-centric, event-driven web apps using EF, Razor &amp;amp; open source”.  The approach we took was to build a demo application from the ground up, and document the process so that it was reproducible.  The app is hosted at &lt;a href=&quot;http://todoapp.exosuite.com&quot;&gt;todoapp.exosuite.com&lt;/a&gt; and the walkthrough is at &lt;a href=&quot;http://todoapp.exosuite.com/walkthrough&quot;&gt;todoapp.exosuite.com/walkthrough&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/todoapp.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can build the app yourself by following the walkthrough.  I promise, I did it many times!  :)&lt;/p&gt;
]]>
    </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Learning F# with TDD: Part 2]]>
    </title>
    <link href="http://endlessobsession.com/blog/learning-f-with-tdd-part-2"/>
    <updated>2012-01-11T21:50:53-05:00</updated>
    <id>http://endlessobsession.com/blog/learning-f-with-tdd-part-2</id>
    <content type="html"><![CDATA[&lt;p&gt;&lt;a href=&quot;http://endlessobsession.com/2011/08/21/learning-fsharp-with-tdd-part-1/&quot;&gt;Last time&lt;/a&gt; I talked about setting up F# testing using NUnit, TestDriven.Net, and NaturalSpec.  This time around I’ll elaborate a little bit on the testing aspects, and also talk about active patterns.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;running-tests&quot;&gt;Running tests&lt;/h2&gt;
&lt;p&gt;First, I noticed a little problem with running the tests.  If I right-clicked on a test method and selected “Run Test(s)”, then the test would run as expected.  However, if I selected “Run Test(s)” for a project or solution, the tests would not be found as described in the &lt;a href=&quot;http://www.navision-blog.de/2009/11/08/getting-started-with-naturalspec/&quot;&gt;getting started post&lt;/a&gt;, so I would see something like “0 passed, 0 failed, 0 skipped, …”.&lt;/p&gt;
&lt;p&gt;The solution for me was to transition from using local spec methods to defining a “Tests” class, with the “TestFixtureAttribute”, and define my specs as static methods (they could be instance methods if needed of course).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[&amp;lt;TestFixture&amp;gt;]
type Tests = class
    new() = {}

    [&amp;lt;Scenario&amp;gt;]
    static member When_... () =
        // test body

end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Voila, tests run as expected!&lt;/p&gt;
&lt;p&gt;Now, a little explanation of how you write the specs…&lt;/p&gt;
&lt;h2 id=&quot;writing-specs&quot;&gt;Writing specs&lt;/h2&gt;
&lt;p&gt;From  &lt;a href=&quot;http://www.navision-blog.de/2009/02/23/introducing-naturalspec-a-dsl-for-testing-part-i/&quot;&gt;Introducing NaturalSpec – A Domain-specific language (DSL) for testing – Part I&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;With the Keyword “&lt;strong&gt;Given&lt;/strong&gt;” I can create a test context (the objects I want to test). In this sample I created a list with 5 elements. With the keyword “&lt;strong&gt;When&lt;/strong&gt;” I call a function which does something with my test context. In this case I want to remove the value 3. In the Assert section (keywords “&lt;strong&gt;It should&lt;/strong&gt;” or “&lt;strong&gt;It shouldn’t&lt;/strong&gt;”) I can give some observations, which should hold for my manipulated test context.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Create the object(s) to be tested using “Given”&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Pipe into “When” to call functions (or do other things)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Pipe into “It should/shouldn’t” to set up assertions&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Finally, pipe into the “Verify” method to run the tests and print the output&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here’s an example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[&amp;lt;TestFixture&amp;gt;]
type Tests = class
    new() = {}

    [&amp;lt;Scenario&amp;gt;]
    static member When_getting_the_state_of_a_new_connection_it_should_be_closed () =
        Given NewConnection()
            |&amp;gt; When getting DbConnection.State
            |&amp;gt; It should equal &amp;quot;Closed&amp;quot;
            |&amp;gt; Verify

end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The NewConnection() method call is entirely fabricated. It serves as the test context in the example.&lt;/p&gt;
&lt;p&gt;“When getting” is followed by a method that takes as input the test context object type (presumably a connection object) and returns some value (string).&lt;/p&gt;
&lt;p&gt;The “equal” method, based on the previous information, takes in two strings and asserts that they are equals.&lt;/p&gt;
&lt;p&gt;And here’s the output:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Scenario: When getting the state of a new connection it should be closed&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Given &amp;lt;fun:When_getting_the_state_of_a_new_connection_it_should_be_closed…&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt; - When getting 




  =&amp;gt; It should equal &amp;quot;Closed&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  ==&amp;gt; Result is: “Closed”&lt;/p&gt;
&lt;p&gt;  ==&amp;gt; OK&lt;/p&gt;
&lt;p&gt;  ==&amp;gt; Time: 0.2060s&lt;/p&gt;
&lt;p&gt;1 passed, 0 failed, 0 skipped, took 0.61 seconds (NUnit 2.5.10).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There’s room for improvement, but it’s good enough for now, so on to active patterns!&lt;/p&gt;
&lt;h2 id=&quot;active-patterns&quot;&gt;Active Patterns&lt;/h2&gt;
&lt;p&gt;From &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd233248.aspx&quot;&gt;MSDN&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Active patterns enable you to define named partitions that subdivide input data, so that you can use these names in a pattern matching expression just as you would for a discriminated union. You can use active patterns to decompose data in a customized manner for each partition.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One example they give is even and odd.  You can define a pattern for “Even” or “Odd” and use that in pattern matching like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;match input with
    | Even -&amp;gt; // do something if even...
    | Odd -&amp;gt; // do something if odd...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Compare that with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (input % 2 === 0) {
    // do something if even...
}
else {
    // do something if odd...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Of course, you could do something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (isEven(input)) {
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;…but that still doesn’t read quite as well in my opinion.&lt;/p&gt;
&lt;p&gt;Even more interesting, you can define partial active patterns that might match the given input, and if so, can transform the result in some way.  The example they gave was number parsing.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let (|Integer|_|) (str: string) =
    let mutable i = 0
    if System.Int32.TryParse(str, &amp;amp;i) then Some(i)
    else None

let (|Float|_|) (str: string) =
    let mutable f = 0.0
    if System.Double.TryParse(str, &amp;amp;f) then Some(f)
    else None

// Consuming code somewhere...
match str with
    | Integer i -&amp;gt; printfn &amp;quot;%d : Integer&amp;quot; i
    | Float f -&amp;gt; printfn &amp;quot;%f : Floating point&amp;quot; f
    | _ -&amp;gt; printfn &amp;quot;%s : Not matched.&amp;quot; str
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This illustrates what makes pattern matching different from traditional control structures. It’s actually a &lt;strong&gt;&lt;em&gt;reusable&lt;/em&gt;&lt;/strong&gt; control structure plus potential augmentation of the input.&lt;/p&gt;
&lt;p&gt;Here’s a post where someone who really digs pattern matching &lt;a href=&quot;http://lorgonblog.wordpress.com/2008/04/17/an-example-of-the-interplay-between-language-features-and-library-design-part-two/&quot;&gt;attempts to explain why&lt;/a&gt;, if you’re interested.&lt;/p&gt;
]]>
    </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[ExoWeb type loading changes]]>
    </title>
    <link href="http://endlessobsession.com/blog/exoweb-type-loading-changes"/>
    <updated>2011-12-02T09:19:55-05:00</updated>
    <id>http://endlessobsession.com/blog/exoweb-type-loading-changes</id>
    <content type="html"><![CDATA[&lt;p&gt;I recently &lt;a href=&quot;http://groups.google.com/group/exosuite/browse_thread/thread/83ed447767348b75&quot;&gt;posted a message&lt;/a&gt; to the ExoSuite Google Group in regards to type loading in ExoWeb.&lt;/p&gt;
&lt;h2 id=&quot;batch-loading&quot;&gt;Batch loading&lt;/h2&gt;
&lt;p&gt;Types are now batch loaded. This means that prior to type caching your pages should only send a single type request (or very few depending on your usage). This was implemented to cut down on the large number of requests sent from the browser, since browsers have limits on the number of concurrent request.&lt;/p&gt;
&lt;p&gt;You don’t have to do anything to enable this functionality.&lt;/p&gt;
&lt;h2 id=&quot;type-loading-and-rules&quot;&gt;Type loading and rules&lt;/h2&gt;
&lt;p&gt;We noticed that a surprisingly large number of types were being requested, and some of them didn’t seem like types that should be needed. I was able to track this down to the “AllowedValues” rule, which was force loading types when instantiated. Since this rule is very common, and often spans types, this would result in a cascading type loading effect. I changed the rule’s active type loading behavior to a passive approach: it becomes enabled when the relevant types are loaded.&lt;/p&gt;
&lt;p&gt;There are two possible side-effects of this change that come to mind.&lt;/p&gt;
&lt;p&gt;First, if you happen to have an allowed values property on a type that is neither the containing type of the property or the property type, then the rule may never be enabled, even if the data is all loaded and editable. This is an odd scenario that shouldn’t happen in practice. To illustrate, if type Person has a property Org of type Organization, and its allowed values are World.AllOrganizations, and type World is not used, then the rule will never be activated. The only way that this example makes sense is if the type World is a required type for the entire app (or feature area), and so will always be available.&lt;/p&gt;
&lt;p&gt;Second, if you are not actually referencing a type in your query paths but subsequently used that type in templates/scripts or expected a $extend to fire when the type was loaded, then in the past you may gotten away with this because of the overly aggressive nature of type loading. Now, types are only loaded because they are referenced in your queries or are otherwise required for object loading (i.e. due to lazy loading). One caveat: several other rules (e.g. CompareRule) may still force type loading to occur. They are less likely to actually change the nature of type loading, but still this behavior may also be changed in the future for other rules.&lt;/p&gt;
&lt;p&gt;The moral of the story: don’t depend on rules to perform type loading.&lt;/p&gt;
]]>
    </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Learning F# with TDD: Part 1]]>
    </title>
    <link href="http://endlessobsession.com/blog/learning-fsharp-with-tdd-part-1"/>
    <updated>2011-08-21T15:59:03-04:00</updated>
    <id>http://endlessobsession.com/blog/learning-fsharp-with-tdd-part-1</id>
    <content type="html"><![CDATA[&lt;p&gt;I decided to dive into a few languages I’ve been meaning to learn by way of the &lt;a href=&quot;http://osherove.com/tdd-kata-1/&quot;&gt;calculator kata&lt;/a&gt;.  First up: F#.&lt;/p&gt;
&lt;p&gt;First, some prerequisites.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;F#, obviously.  This comes with VS 2010 so you probably already have it.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;We’re doing TDD, so we need some sort of testing framework.  I decided to go with &lt;a href=&quot;http://www.navision-blog.de/2009/11/08/getting-started-with-naturalspec/&quot;&gt;NaturalSpec&lt;/a&gt;.  This means we’ll need to download the package from &lt;a href=&quot;https://github.com/forki/NaturalSpec&quot;&gt;github&lt;/a&gt;, build it, and also download and install &lt;a href=&quot;http://www.nunit.org/index.php?p=download&quot;&gt;NUnit&lt;/a&gt; and &lt;a href=&quot;http://testdriven.net/default.aspx&quot;&gt;TestDriven.NET&lt;/a&gt;.  The author has a good &lt;a href=&quot;http://www.navision-blog.de/2009/11/08/getting-started-with-naturalspec/&quot;&gt;blog post&lt;/a&gt; on setting up and running the test project.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keep in mind that I’m extremely new to the language, so the code I ended up with probably doesn’t reflect what a seasoned F# programmer would write.  I tried to follow conventions that I could pick out as much as possible.  The first part of the kata is an add function.  Pretty simple.  In the interest of not getting bogged down in one language I didn’t take if very far, so I will only be able to make very broad observations at this point.&lt;/p&gt;
&lt;p&gt;Two positive things that I took away from it:  pattern matching and pipe.&lt;/p&gt;
&lt;p&gt;Pattern matching is something that I knew was popular in functional programming circle but had never experienced first hand.  Now that I have a taste of it I think it’s a handy abstraction, but I have a feeling that I haven’t even begun to scratch the surface of what it could mean.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let addNumbers (numbers : List) =
    match numbers.Length with
    | 0 -&amp;gt; 0
    | 1 -&amp;gt; numbers.[0]
    | _ -&amp;gt; numbers |&amp;gt; Seq.reduce (fun a b -&amp;gt; a + b)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is simply an alternative form of the familiar if-else branching logic, nothing special really, but it is pleasantly terse.&lt;/p&gt;
&lt;p&gt;Pipe is even more exciting.  Take the following for example.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;numbers.Split &amp;#39;,&amp;#39; |&amp;gt; Array.toList |&amp;gt; List.map int |&amp;gt; addNumbers
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using the pipe operator (that’s “|&amp;gt;”) you can stream a value through a series of transformations, in this case splitting the string, converting the array to a list, converting the items in the list to integers, and finally passing the list to a method called “addNumbers”.&lt;/p&gt;
&lt;p&gt;In any other language this would probably read similarly if your transformations are all instance methods, however, that breaks down as soon as you have to use global or static/class methods.  The pipe form always reads nicely from the beginning to the end.  Of course, this example could be a little simpler since our function can technically accept an array as its argument.&lt;/p&gt;
&lt;p&gt;To be continued…&lt;/p&gt;
]]>
    </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Disable the audible beep in Mac Terminal]]>
    </title>
    <link href="http://endlessobsession.com/blog/disable-the-audible-beep-in-mac-terminal"/>
    <updated>2011-07-11T17:45:01-04:00</updated>
    <id>http://endlessobsession.com/blog/disable-the-audible-beep-in-mac-terminal</id>
    <content type="html"><![CDATA[&lt;p&gt;This was starting to get on my nerves.  I really don’t need a fancy sound clip to keep reminding me that I deleted as far as I can go.  I always do that, since I’m a bit OCD.  This one took me too long to find, mainly becuase of tabs.&lt;/p&gt;
&lt;p&gt;Anyway, to disable the sounds, go to &lt;strong&gt;&lt;em&gt;Terminal -&amp;gt; Preferences -&amp;gt; Settings (top tab group) -&amp;gt; Advanced (inner tab group)&lt;/em&gt;&lt;/strong&gt;, look for the “Bell” group label and uncheck the “Audible Bell” option.  Note that this is specific to a particular settings configuration/theme, so if you switch themes the behavior will change.&lt;/p&gt;
]]>
    </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Tfs Rollback]]>
    </title>
    <link href="http://endlessobsession.com/blog/tfs-rollback-2"/>
    <updated>2011-07-08T08:14:52-04:00</updated>
    <id>http://endlessobsession.com/blog/tfs-rollback-2</id>
    <content type="html"><![CDATA[&lt;p&gt;Using the tf command line tool you can rollback all or part of a tfs checkin.  This is useful for two reasons: 1) If you at least want to roll back all changes in one or more file (not some changes in a file) then it saves you from having to manually revert changes (I’m a firm believer in not giving yourself the opportunity to goof up) , and 2) the checkin is actually marked as a &lt;em&gt;rollback&lt;/em&gt;, so you don’t have to rely on checkin notes to identify it as such.&lt;/p&gt;
&lt;p&gt;As a side note, based on what I’ve seen in the way that tfs represents changes, this rollback changeset is simply an add, edit or delete, with the additional information that it was a rollback of a prior change.  The original checkin is still in the tfs history.&lt;/p&gt;
&lt;p&gt;To do a rollback, first open up the visual studio command prompt.  You should have a shortcut in your start menu.  On my machine the command is: &lt;em&gt;&lt;strong&gt;%comspec% /k “”c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat”” x86&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Here’s the help for tf rollback (using the command &lt;em&gt;tf rollback /?&lt;/em&gt;):&lt;/p&gt;
&lt;p&gt;TF - Team Foundation Version Control Tool, Version 10.0.30319.1&lt;/p&gt;
&lt;p&gt;Copyright (c) Microsoft Corporation.  All rights reserved.&lt;/p&gt;
&lt;p&gt;Rolls back the changes in a single or a range of changesets:&lt;/p&gt;
&lt;p&gt;tf rollback /changeset:changesetfrom~changesetto [itemspec] [/recursive]&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        [/lock:none|checkin|checkout] [/version:versionspec]




        [/keepmergehistory] [/noprompt] [/login:username,[password]]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;tf rollback /toversion:versionspec itemspec [/recursive]&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        [/lock:none|checkin|checkout] [/version:versionspec]




        [/keepmergehistory] [/noprompt] [/login:username,[password]]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Versionspec:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Date/Time         D&amp;quot;any .Net Framework-supported format&amp;quot;




                  or any of the date formats of the local machine




Changeset number  Cnnnnnn




Label             Llabelname




Latest version    T




Workspace         Wworkspacename;workspaceowner
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;First, we need to make sure we are working within our workspace.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;cd path\to\workspace\root&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So, for example, we could rollback an entire changeset:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;tf rollback /changeset:12345&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Or, we can rollback a single item in the changeset:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;tf rollback /changeset:12345 $/Path/To/Item&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There is also a login param that you can pass if needed:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;tf rollback /changeset:12345 /login:domain\username,password&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
]]>
    </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Visual Studio External Tools]]>
    </title>
    <link href="http://endlessobsession.com/blog/visual-studio-external-tools"/>
    <updated>2011-01-24T10:49:32-05:00</updated>
    <id>http://endlessobsession.com/blog/visual-studio-external-tools</id>
    <content type="html"><![CDATA[&lt;p&gt;Here’s a neat visual studio tip.  You can run any external command from within visual studio, and add a button to the command bar or map it to a keyboard shortcut.  This is really important to me because I rely heavily on keyboard shortcuts.  I love that I can hit a combination of keys and perform a repetitive task automatically, plus the result can be incorporated into visual studio by way of the output window.&lt;/p&gt;
&lt;p&gt;Some examples of what you might use this for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get latest on several team projects to start your day.&lt;/li&gt;
&lt;li&gt;Check out a specific set of files.&lt;/li&gt;
&lt;li&gt;Automate various git commands from within visual studio.&lt;/li&gt;
&lt;li&gt;Run a batch file with a set of arguments that you define when you run it.&lt;/li&gt;
&lt;li&gt;Launch another application (i.e.: web browser).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What follows is inspired by Rob Conery’s Git series on tekpub.  You’ll have to watch the full video to see how he uses external tools to incorporate git in Visual Studio.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;To get started from the menu go to Tools -&amp;gt; External Tools.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/mattheyan/5384927410/&quot;&gt;&lt;img src=&quot;http://farm6.static.flickr.com/5216/5384927410_e1d55e1e57.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then you should see a dialog that looks like this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/mattheyan/5384323203/&quot;&gt;&lt;img src=&quot;http://farm6.static.flickr.com/5215/5384323203_efb55aba83.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some of the options are pretty self-explanatory.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Title is obvious.&lt;/li&gt;
&lt;li&gt;Command is the path to the command to execute, also obvious.&lt;/li&gt;
&lt;li&gt;Arguments is pretty simple on the surface, but we have some interesting options at our disposal, which you can use to make the command contextual.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/mattheyan/5384366343/&quot;&gt;&lt;img src=&quot;http://farm6.static.flickr.com/5216/5384366343_e368894d46.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We have similar options for the initial directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/mattheyan/5384366357/&quot;&gt;&lt;img src=&quot;http://farm6.static.flickr.com/5217/5384366357_d33e12f2fa.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this example I’m using the file name and extension of the current item (open document) to run using node, assuming it’s a JavaScript file.  I selected “Use Output window” so that the output will show up in visual studio, rather than launching a separate window.  This is handy if you don’t need to perform any additional tasks after the fact.&lt;/p&gt;
&lt;p&gt;So, now that you have your external command, you can run it from the “Tools” menu.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/mattheyan/5385120864/&quot;&gt;&lt;img src=&quot;http://farm6.static.flickr.com/5217/5385120864_b21ca90a5b.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can also add buttons to the toolbar, map keyboard shortcuts (search for “ExternalCommand1, “ExternalCommand2”, etc.), and maybe even add context menu items (though I haven’t figured that one out completely).&lt;/p&gt;
]]>
    </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[ExoWeb's Entity System]]>
    </title>
    <link href="http://endlessobsession.com/blog/exowebs-entity-system"/>
    <updated>2011-01-13T06:34:46-05:00</updated>
    <id>http://endlessobsession.com/blog/exowebs-entity-system</id>
    <content type="html"><![CDATA[&lt;p&gt;Matt Hooper recently posted an &lt;a href=&quot;http://mhoop.wordpress.com/2011/01/13/exowebs-entity-system/&quot;&gt;overview of ExoWeb’s entity system&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;From the post:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We’ve done our best to make sure the parts and pieces that comprise the ExoWeb entity system work consistently, fit together cleanly and take advantage of JavaScripts language features.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Go check it out!&lt;/p&gt;
]]>
    </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Intro to Client-Server Mapping in ExoWeb]]>
    </title>
    <link href="http://endlessobsession.com/blog/into-to-client-server-mapping-in-exoweb"/>
    <updated>2011-01-10T10:28:34-05:00</updated>
    <id>http://endlessobsession.com/blog/into-to-client-server-mapping-in-exoweb</id>
    <content type="html"><![CDATA[&lt;p&gt;As a follow up to my &lt;a href=&quot;http://endlessobsession.com/blog/www.google.com&quot;&gt;Brief Introduction to ExoWeb&lt;/a&gt;, I would like to go into more detail about the communications between client and server.&lt;/p&gt;
&lt;p&gt;The client interacts with the server in two basic ways.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pulling information: type and instance data.&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;Pushing information: changes to the model and/or instructions to do something.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first type, pulling information, is pretty straightforward. Type information doesn’t change (frequently) so it is actually cached on the client if possible. Querying for instance data is similar to querying a database. You request an object of a particular type with a particular id, but you can also include a set of paths that tell the services what additional related data you are interested in. The primary component of a query might look something like this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{ from: &amp;quot;Person&amp;quot;, id: &amp;quot;1&amp;quot;, and: [&amp;quot;this.Additional.Properties.To.Load&amp;quot;] }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The second type, pushing information, gets a little more interesting. If you’re going to sync data between two disconnected systems there are two primary approaches that you might take. First, you could send simple data from point A to point B, manipulate it, then send it back from point B to point A in the same form. As you could imagine this can get pretty expensive and tedious. Of course, you might just send the portions of data that have changed to cut down on overhead. The bigger problem, I think, is that you don’t really know what has happened unless you do full graph comparisons. Another approach is to keep track of &lt;em&gt;changes&lt;/em&gt; as they occur and send those back and forth. This is what ExoWeb does.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;changes: [ { type: &amp;quot;ValueChange&amp;quot;, instance: { id: &amp;quot;1&amp;quot;, type: &amp;quot;Person&amp;quot; }, property: &amp;quot;FirstName&amp;quot;, oldValue: &amp;quot;Rob&amp;quot;, newValue: &amp;quot;Robert&amp;quot; }, ... } ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The client can also raise events, for example “save”, a built-in event. In response, the server can send back additional changes to the model.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;changes: [ { type: &amp;quot;Save&amp;quot;, idChanges: [ { type: &amp;quot;Person&amp;quot;, from: &amp;quot;?4&amp;quot;, to: &amp;quot;644&amp;quot; } ] }, ... ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The payload isn’t limited to data. It can also include conditions, for example, permissions, or invalid data conditions. More on that later.&lt;/p&gt;
&lt;p&gt;This has been a very basic introduction to the way client-server communication works in ExoWeb. Look out for more updates in the future.&lt;/p&gt;
]]>
    </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[A Brief Introduction to ExoWeb]]>
    </title>
    <link href="http://endlessobsession.com/blog/a-brief-introduction-to-exoweb"/>
    <updated>2011-01-10T07:54:17-05:00</updated>
    <id>http://endlessobsession.com/blog/a-brief-introduction-to-exoweb</id>
    <content type="html"><![CDATA[&lt;p&gt;&lt;a href=&quot;http://endlessobsession.com/blog/exo-suite-and-client-scripts-on-github&quot;&gt;A while back&lt;/a&gt; I talked about the ExoWeb project and scripts that are now hosted on github.  That post was a little vague because not much has been documented about what you can actually do with ExoWeb.  That’s what I hope to do here.&lt;/p&gt;
&lt;p&gt;First off, let me restate the purpose of ExoWeb as simply as I can.  ExoWeb exists to bridge the gap between the client and server.  You can think of it as a combination client-server mapper and model-view mapper.&lt;/p&gt;
&lt;h2 id=&quot;client-server-mapping&quot;&gt;Client Server Mapping&lt;/h2&gt;
&lt;p&gt;When I say that ExoWeb is a client-server mapper what I mean is that it handles mapping from an object model on the server to the client (and vice versa) in much the same way that an ORM maps from a database schema to an object model.  The general idea is that you’re persisting objects and that you would like to be able to easily manipulate those objects in JavaScript code, without any extra work.&lt;/p&gt;
&lt;p&gt;For example, say you have a C# class that is persisted to a database using your choice of ORM.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class Person
{
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string FullName
    {
        get
        {
            return FirstName + &amp;quot; &amp;quot; + LastName;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You would want to be able to write JavaScript code to modify this object like so (ignoring the details of the syntax [1]).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;person.set_FirstName(&amp;quot;Bob&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ExoWeb aims to let you do this with very little effort.&lt;/p&gt;
&lt;p&gt;What are some of the things that you might want to do with the model?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have the full name automatically reflect the fact that the first name is now “Bob”&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Save these changes by simply calling a method&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;“Round trip” to the server to perform complex or sensitive operations&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Display the person’s information in a view&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;…which leads us to the next primary area of functionality.&lt;/p&gt;
&lt;h2 id=&quot;view-model-mapping&quot;&gt;View Model Mapping&lt;/h2&gt;
&lt;p&gt;You have a model on the client, so now you want to display some information to the user and possibly accept input.  What are some of the tools that you might want to have at your disposal?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create regions in your form that correspond to lists in the model&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Two-way binding of properties to inputs elements and form regions&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Respond to changes and redraw parts of the form as needed&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Attach behavior to the form such as clicking links, toggling regions, etc&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Take advantage of model metadata like formats, allowed values, validation rules, etc&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Allow for lazy loading of certain information when it is needed on the form&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s a glance at the basic features that we want from ExoWeb.  So, what does it actually look like?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Disclaimer:  ExoWeb is under heavy development, so this stuff is always changing.  Feedback is welcome.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;setting-up-a-page&quot;&gt;Setting up a Page&lt;/h2&gt;
&lt;p&gt;First off we have to include the ExoWeb script(s).  Take a look at the &lt;a href=&quot;http://github.com/mattheyan/exoweb&quot;&gt;github repo&lt;/a&gt; to see what’s available.  The “dist” folder contains 3 scripts: exoweb-msajax.js, exoweb-msajax-nojquery.js, and jquery.exoweb-msajax.js.  For now we’ll just include exoweb-msajax.js.  ExoWeb currently also requires jQuery (1.3 or 1.4) and the MsAjax client libraries (specifically, MicrosoftAjax.js and MicrosoftAjaxTemplates.js).  These will be included in the repo in the near future.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note:  ExoWeb currently uses the MsAjax client libraries, primarily for two purposes: observer and integrated template rendering.  In the near future these dependencies should be isolated so that other implementations could be used.  For example, better integration with jQuery is a personal goal of mine.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now that we have the right scripts included we need to set up the page’s context.  This tells ExoWeb what data to load and what to do before and after it is loaded.  We do this by calling the $exoweb function.  It accepts a JavaScript object with any of the following properties.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;model: A JavaScript object that defines the data to load from the server.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;types: An array of types to load.  This is usually not needed since types are automatically loaded based on the “model” parameter.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;init:  A function that is invoked as soon as model or type data has been requested.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;contextReady: A function that is invoked as soon as the model or type data has been loaded, but before the UI is rendered.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;domReady: A function that is invoked after the UI has been rendered.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can call $exoweb any number of times, and as an example our query might look something like this (please forgive the contrived example).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$exoweb({
    init: function() {
        ExoWeb.UI.Template.load(&amp;quot;/path/to/template&amp;quot;);
    },
    types: [
        {
            from: &amp;quot;CustomWidget&amp;quot;,
            and: [&amp;quot;this.CustomInformation&amp;quot;]
        }
    ],
    model: {
        widget: {
            from: &amp;quot;Widget&amp;quot;,
            id: &amp;quot;1&amp;quot;,
            and: [&amp;quot;this.Type.DefaultPrice&amp;quot;]
        }
    },
    contextReady: function() {
        context.model.widget.doSomething();
    },
    domReady: function() {
        $(&amp;quot;.widget input[type=button].save&amp;quot;).click(function() {
            context.server.save(context.model.widget);
        });
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;During init we want to load an external template file.  I will talk more about this in the future, but for now I will say that ExoWeb allows you to bind parts of your form to a dynamic template that is selected based on the HTML element and the data that will be rendered.  This allows you to break out reusable templates for common display scenarios, but it also allows your form to be dynamic in the sense that the markup can change automatically based on user input.&lt;/p&gt;
&lt;p&gt;The types and model portions are what trigger requests to the server.  This will load up all of the metadata that is needed, as well as the instance data for the instances and paths that you specify.  When the context is ready it will have a model property that contains a property for each thing that you requested (in this case, the widget).&lt;/p&gt;
&lt;p&gt;Context ready allows you to perform custom operations after all of your data is loaded.  For example, if you have an add/edit page you can perform setup logic that may be needed only in the add scenario.&lt;/p&gt;
&lt;p&gt;DOM ready is a good place to put any DOM manipulation code that is specific to your page and it’s data and templates.  For general UI behavior I would recommend using jQuery to attach behavior as needed based on css selectors (a topic for another day).  Notice here the use of the “server” object, which is found on the context.  The server object allows you to save, round trip, raise events, and inspect the changes that have occurred.&lt;/p&gt;
&lt;p&gt;Now, to display this on the form we might write something like this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;sys-template widget&amp;quot; sys:attach=&amp;quot;dataview&amp;quot;
    dataview:data=&amp;quot;{~ context.model.widget, source={{ window }} }&amp;quot;&amp;gt;
    &amp;lt;h3&amp;gt;Editing &amp;lt;span&amp;gt;{binding Name}&amp;lt;/span&amp;gt;&amp;lt;/h3&amp;gt;
    &amp;lt;div class=&amp;quot;sys-template&amp;quot; sys:attach=&amp;quot;dataview&amp;quot; dataview:data=&amp;quot;{@ Type }&amp;quot;&amp;gt;
        &amp;lt;label&amp;gt;Type:&amp;lt;/label&amp;gt;
        &amp;lt;select class=&amp;quot;sys-template&amp;quot; sys:value=&amp;quot;{binding systemValue}&amp;quot;
            sys:attach=&amp;quot;dataview&amp;quot; dataview:data=&amp;quot;{binding options}&amp;quot;&amp;gt;
            &amp;lt;option value=&amp;quot;{binding systemValue}&amp;quot;&amp;gt;{binding displayValue}
                &amp;lt;/option&amp;gt;
        &amp;lt;/select&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;sys-template&amp;quot; sys:attach=&amp;quot;dataview&amp;quot; dataview:data=&amp;quot;{@ Price }&amp;quot;&amp;gt;
        &amp;lt;label&amp;gt;Price:&amp;lt;/label&amp;gt;
        &amp;lt;input type=&amp;quot;text&amp;quot; sys:value=&amp;quot;{binding displayValue}&amp;quot; /&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;input type=&amp;quot;button&amp;quot; class=&amp;quot;save&amp;quot; value=&amp;quot;Save&amp;quot; /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The form is not rendered until the “widget” object has been loaded.  Also, notice the “@” extension that is used to incorporate metadata in the form.  For a pick list it will give you the list of options for a particular property.  Also, for other properties it allows you to automatically convert from and to a “system” or “display” format.  In a nutshell, the “display” format is a human-readable form of the underlying data that also includes format conditions for things like email, phone number, etc, while the “system” format is not intended to be shown to a user but instead can be used to uniquely identify an object.&lt;/p&gt;
&lt;p&gt;This has been a very brief introduction to ExoWeb.  There is much more to talk about and you can expect follow up posts in the near future.&lt;/p&gt;
]]>
    </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Getting started with virtualenvwrapper]]>
    </title>
    <link href="http://endlessobsession.com/blog/getting-started-with-virtualenvwrapper"/>
    <updated>2010-12-20T21:22:33-05:00</updated>
    <id>http://endlessobsession.com/blog/getting-started-with-virtualenvwrapper</id>
    <content type="html"><![CDATA[&lt;p&gt;A while back I toyed with using &lt;a href=&quot;http://pypi.python.org/pypi/virtualenv&quot;&gt;virtualenv&lt;/a&gt; and &lt;a href=&quot;http://www.doughellmann.com/projects/virtualenvwrapper/&quot;&gt;virtualenvwrapper&lt;/a&gt; to manage isolated python packages for development, but I didn’t get very far at the time.  Recently I’ve been dabbling in ruby and have used &lt;a href=&quot;http://rvm.beginrescueend.com/&quot;&gt;RVM&lt;/a&gt; to manage ruby environments and gems.  This experience has been a positive one, so I decided to revisit virtualenvwrapper to see how it would compare.&lt;/p&gt;
&lt;h2 id=&quot;installing&quot;&gt;Installing&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Note that I have tested this process on Ubuntu 10.04 and 11.04.  I have not tested on other environments.  Windows setup may follow in a later post.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The basic steps that I used are…&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install python&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Install virtualenv&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Install virtualenvwrapper&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Configure virtualenvwrapper&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Create a new virtual environment&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Install packages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A script to accomplish most of this can be found &lt;a href=&quot;http://github.com/mattheyan/environment&quot;&gt;here&lt;/a&gt; @&lt;em&gt;/linux/virtualenvwrapper.sh&lt;/em&gt;.&lt;/p&gt;
&lt;h4 id=&quot;1-make-sure-that-the-script-can-be-executed-&quot;&gt;1) Make sure that the script can be executed:&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;sudo chmod +x virtualenvwrapper.sh&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-execute-the-script-&quot;&gt;2) Execute the script:&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;./virtualenvwrapper.sh&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-initialize-virtualenvwrapper-&quot;&gt;3) Initialize virtualenvwrapper:&lt;/h4&gt;
&lt;p&gt;The script mentioned above adds the following to ~/.bashrc, but will not take effect until you open a new terminal window.  I’m sure there’s a way to avoid having to do this.  In the code below, ~/.virtualenvs can be changed to any path you wish.  Also, the path may vary (&lt;a href=&quot;http://www.doughellmann.com/docs/virtualenvwrapper/install.html#comment-83318419&quot;&gt;link&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;export WORKON_HOME=~/.virtualenvs
source /usr/local/bin/virtualenvwrapper.sh&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;4-create-a-new-environment-&quot;&gt;4) Create a new environment:&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;mkvirtualenv env&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;5-begin-working-on-your-new-environment-&quot;&gt;5) Begin working on your new environment:&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;workon env&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;6-install-packages&quot;&gt;6) Install packages&lt;/h4&gt;
&lt;p&gt;This can be done using pip (or easy_install, I believe) and the packages are installed in $WORKON_HOME/env/…&lt;/p&gt;
&lt;p&gt;You can list all of your required packages in a single pip requirements file and install at once.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Django==1.1.2
django-tagging==0.3.1
South==0.7.1&lt;/p&gt;
&lt;p&gt;Then, use pip to install the packages:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install -r /path/to/requirements&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update 12/29/2010:  Using a specific version of python would be nice, especially since it’s something that can be done easy enough with &lt;a href=&quot;http://rvm.beginrescueend.com/&quot;&gt;RVM&lt;/a&gt;.  I will be investigating this so look out for a future post on the topic.&lt;/em&gt;&lt;/p&gt;
]]>
    </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[I wish I could remember what Amnesia is...]]>
    </title>
    <link href="http://endlessobsession.com/blog/i-wish-i-could-remember-what-amnesia-is"/>
    <updated>2010-12-07T19:12:16-05:00</updated>
    <id>http://endlessobsession.com/blog/i-wish-i-could-remember-what-amnesia-is</id>
    <content type="html"><![CDATA[&lt;p&gt;One of my coworkers, Matt Hooper, recently released an open source project called Amnesia.  The aim of Amnesia is to “transacts all changes to a website to facilitate automated UI testing”.  Basically, you can run your tests and change and add data all day long and the changes, whether they come from the website or the tests themselves, will not last beyond the scope of the test.  Pretty cool, huh?&lt;/p&gt;
&lt;p&gt;The blog post where he announced it can be found &lt;a href=&quot;http://mhoop.wordpress.com/2010/11/23/amnesia-1-0-released-database-rollbacks-for-automated-ui-tests/&quot;&gt;here&lt;/a&gt;, and the source and documentation is &lt;a href=&quot;http://amnesia.codeplex.com/&quot;&gt;hosted on Codeplex&lt;/a&gt;.&lt;/p&gt;
]]>
    </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[The Exo-suite (and client scripts on Github)]]>
    </title>
    <link href="http://endlessobsession.com/blog/exo-suite-and-client-scripts-on-github"/>
    <updated>2010-12-07T19:07:12-05:00</updated>
    <id>http://endlessobsession.com/blog/exo-suite-and-client-scripts-on-github</id>
    <content type="html"><![CDATA[&lt;p&gt;Off and on at &lt;a href=&quot;http://vc3.com/&quot;&gt;work&lt;/a&gt; over the last year or so I have been working on an open-source project called &lt;a href=&quot;http://exoweb.codeplex.com/&quot;&gt;ExoWeb&lt;/a&gt;, as well as supporting projects called &lt;a href=&quot;http://exograph.codeplex.com/&quot;&gt;ExoGraph&lt;/a&gt; and ExoRule.  ExoWeb and ExoGraph are hosted on &lt;a href=&quot;http://codeplex.com/&quot;&gt;Codeplex&lt;/a&gt;, though they are somewhat stale at this point.&lt;/p&gt;
&lt;p&gt;Before I go any farther I’ll give you (and future self) my take on the purpose of these projects.&lt;/p&gt;
&lt;h3 id=&quot;exograph&quot;&gt;ExoGraph&lt;/h3&gt;
&lt;p&gt;…is essentially an enabler.&lt;/p&gt;
&lt;p&gt;From the codeplex site:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ExoGraph is a graph library that leverages type information to optimize graph operations and notifications. The library exposes type-level events for object initialization, property retrieval, property path changes, and custom domain events within a graph context.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This doesn’t sound very useful in and of itself, right?  Well, it’s not supposed to be.  It’s an enabler, remember?  That’s where ExoWeb and ExoRule come in…&lt;/p&gt;
&lt;h3 id=&quot;exorule&quot;&gt;ExoRule&lt;/h3&gt;
&lt;p&gt;…is a rules framework that leverages ExoGraph.  That is all for now.&lt;/p&gt;
&lt;h3 id=&quot;exoweb&quot;&gt;ExoWeb&lt;/h3&gt;
&lt;p&gt;…is a JavaScript framework, basically.  It also relies on a supporting server-side web request handler as well as a working ExoGraph implementation.&lt;/p&gt;
&lt;p&gt;From the codeplex site, ExoWeb…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;…aims to provide a rich JavaScript object model, intuitive UI code based on the fundamental languages of the web (HTML, CSS, and JavaScript), model- and UI-driven validation, and seamless synchronization of changes between client and server.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That may not be crystal-clear, but fortunately you can browse the source, which is what I really want to write about anyway.&lt;/p&gt;
&lt;p&gt;The JavaScript source is now &lt;a href=&quot;http://github.com/mattheyan/exoweb&quot;&gt;hosted on Github&lt;/a&gt;.  If you take a look at the &lt;a href=&quot;http://exoweb.codeplex.com/SourceControl/list/changesets&quot;&gt;source on Codeplex&lt;/a&gt; you’ll notice that there are 8 script files: exoweb.js, exoweb.model.js, exoweb.mapper.js, exoweb.view.js, exoweb.ui.js, exoweb.mock.js, exoweb.jquery.js, and start.debug.js.  The source on Github, however, has many more script files as well as specs (using jasmine) and a build process (using rake) that produces the scripts listed above.  It is loosely modeled after the &lt;a href=&quot;http://github.com/jquery/jquery&quot;&gt;jquery source&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have a few goals in hosting the project on Github.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Isolate classes and related functions in order to make it easier to manage, illuminate code structure, improve architecture and design, and limit dependencies.&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;Allow for (hopefully) isolated testing of individual classes and functions.&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;Isolate the bulk of the code which is not dependent on any particular JavaScript library or server-side technology.&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;Take advantage of github’s popularity in open source software collaboration, and…well, I just like Github.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At the time of this writing the project produces the destination scripts that more or less match the scripts in the original project (not the ones on codeplex, they’re old).  Also, a few of the source files have corresponding specs that pass, using &lt;a href=&quot;http://nodejs.org/&quot;&gt;nodejs&lt;/a&gt; to run them.&lt;/p&gt;
&lt;p&gt;Finally, in writing the build script, I got the chance to learn a little &lt;a href=&quot;http://rake.rubyforge.org/&quot;&gt;rake&lt;/a&gt; (ruby make), which I highly recommend.&lt;/p&gt;
&lt;p&gt;One of my other goals is to create working ExoGraph/ExoWeb implementations for django and rails.  The beginnings of the django implementation is currently &lt;a href=&quot;http://github.com/mattheyan/django-exoweb&quot;&gt;hosted on Github&lt;/a&gt; as well.&lt;/p&gt;
]]>
    </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Installing VirtualBox Guest Additions]]>
    </title>
    <link href="http://endlessobsession.com/blog/installing-virtualbox-guest-addition"/>
    <updated>2010-09-30T17:19:32-04:00</updated>
    <id>http://endlessobsession.com/blog/installing-virtualbox-guest-addition</id>
    <content type="html"><![CDATA[&lt;p&gt;First, a disclaimer:  you may not find this post useful unless you are interested in virtualbox or virtualization.  Also, there are plenty of other blogs that will tell you how to install the guest additions.  This is my personal reference.&lt;/p&gt;
&lt;p&gt;According to the &lt;a href=&quot;http://www.virtualbox.org/wiki/VirtualBox&quot;&gt;virtualbox wiki&lt;/a&gt;, virtualbox is &lt;em&gt;the only professional-quality virtualization solution that is also Open Source Software&lt;/em&gt;.  Alright, a big +1 for open source!  Not that I have ever cracked open the source… :P&lt;/p&gt;
&lt;p&gt;Another big plus for me is that it is cross-platform.  I use windows and linux machines, so this is very important to me.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;As an aside, VMware player appears to also be somewhat cross-platform (windows and linux, no OSX).  I have used it as well, but I feel better about my experience with virtualbox.  However, I don’t have any real solid reasons to explain why.  Feel free to try to change my mind if you must…&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So what are the guest additions?  From the &lt;a href=&quot;http://www.virtualbox.org/wiki/VirtualBox&quot;&gt;wiki&lt;/a&gt;, it is &lt;em&gt;special software that can be installed inside Windows, Linux and Solaris virtual machines to improve performance and make integration much more seamless&lt;/em&gt;.  Things like &lt;em&gt;mouse pointer integration and arbitrary screen solutions (e.g. by resizing the guest window)&lt;/em&gt;.  That’s the kicker for me.  I install them in my linux guests so that the guest resolution will adjust to match the host window.&lt;/p&gt;
&lt;p&gt;Anyway, the point of this is how to actually install them.  &lt;a href=&quot;http://digitizor.com/2009/05/26/how-to-install-virtualbox-guest-additions-for-a-linux-guest/&quot;&gt;Here is a link&lt;/a&gt; to a good set of instructions in case you don’t find these sufficient.&lt;/p&gt;
&lt;p&gt;First, mount the guest additions “disc” from the host window’s menu:  Devices &amp;gt; Install Guest Additions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://endlessobsession.com/wp-content/uploads/2010/09/install_guest_additions-300x185.png&quot; alt=&quot;Mount Guest Additions Menu&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now you should see the disc mounted in nautilus.  The next step is to copy the appropriate file to your home folder (or some other location on the guest machine).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cp /media//VBoxLinuxAdditions-x86.run .&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, make the file runnable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sudo chmod +x VBoxLinuxAdditions-x86.run&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, run the installer.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sudo ./VBoxLinuxAdditions-x86.run&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s all!&lt;/p&gt;
]]>
    </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Resize jQuery Dialog]]>
    </title>
    <link href="http://endlessobsession.com/blog/resize-jquery-dialog"/>
    <updated>2010-08-16T18:00:24-04:00</updated>
    <id>http://endlessobsession.com/blog/resize-jquery-dialog</id>
    <content type="html"><![CDATA[&lt;p&gt;If you ever need to resize and reposition a jQuery dialog, the following script should do the trick:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;function setDialogSize($dialogEl, width, height) {&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;$dialogEl.dialog(“option”, “width”, width);&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;$dialogEl.dialog(“option”, “height”, height);&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;$dialogEl.dialog(“option”, “position”, $dialogEl.dialog(“option”, “position”));&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you change a UI component’s option it should respond by updating immediately to reflect the change.  If it doesn’t, it’s a bug.  I read that somewhere :)&lt;/p&gt;
]]>
    </content>
  </entry>
</feed>